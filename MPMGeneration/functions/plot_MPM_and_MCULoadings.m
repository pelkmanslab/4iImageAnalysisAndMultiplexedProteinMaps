function [map_prox_coordinates, mcu_mean_int_zs] = plot_MPM_and_MCULoadings(path_som, path_save_proxsize, perplexity, std_display_limit_edges, scaling_factor_edges, scaling_factor_nodes, list_stains)
%%% Description
% This function uses outputs generated by
% Script_05_Proximity_Size_Calculation to generate a visual representation
% of a Multiplexed Protein Map. Nodes in this 2D visualisation represent
% MCUs. The nodes diameter are scaled relative to the area of an MCU. The
% spatial location of the Nodes is caluculated based on the pairwise Spatial
% Proximity Scores (SPS) of each MCU with all other MCUs by tSNE. Nodes which
% localize closly in the MPM have similar SPS profiles. Edges connecting
% nodes represent SPS which are greater than the user specified  std_display_limit_edges.
% The function also generated a 2D matrix of the 4i channel loading of individual MCUs. 
% tSNE implementation used in this function is part of the algorithm suite
% associated to
% J. H. Levine et al., Data-Driven Phenotypic Dissection of AML Reveals Progenitor-like Cells that Correlate with Prognosis. 
% Cell 162, 184–197 (2015). doi: 10.1016/ j.cell.2015.05.047; pmid: 26095251
% 
% This code accompanies the publication
% G. Gut et al., Science 361, eaar7042 (2018). DOI: 10.1126/science.aar7042
% Author: Gabriele Gut, University of Zurich, Switzerland

%%% Inputs
% path_som = path_som; % specify path to output of Script_03_ClusterMPPMatrix_with_SOM ending with '_ContributionNode.csv'
% path_save_proxsize = path_save_proxsize; % specify path to output of Script_05_Proximity_Size_Calculation (path_save_proxsize) containing the string "MCU_Proximity_Size"
% perplexity = []; % Often 3, try what looks best for you for the tSNE projection of the Multiplexed Protein Map. e.g. 3
% std_display_limit_edges = []; % Threshold for displaying the SPS edges between nodes in MPM e.g. 2.5
% scaling_factor_edges = []; % Scales the thicknes of the edges in the MPM, e.g. 20
% scaling_factor_nodes = []; % Scales the diameter of the nodes in the MPM, e.g. 10000
% list_stains = arrayfun(@(x) sprintf('%02d',x),[1:(size(mpp_matrix,2))], 'UniformOutput',false); % this will generate as list of strings starting from Stain01, finishing with StainN, where N is the number of 4i channels measured.
% % list_stains = {'Type in 4iChannel 01' 'Type in 4iChannel 02' 'Type in 4iChannel N' 'etc' ''Type in 4iChannel last''}; Alternatively, type in 4i  channels manually.

%% Outputs
% map_prox_coordinates, 2D matrix containing the 2D position of the MPM nodes in the tSNE space
% mcu_mean_int_zs, 2D matrix containing the MCU 4i intensity loadings. Rows are MCUS, Columns are 4i channels. Where the first MCU/4i channel is in Row 1/column 1 and last MCU/ 4i channel in row/columns last.


%% Load results of Script_05
tmp = load(path_save_proxsize);
mcu_labels = tmp.mcu_labels; % specify 
proximity_pooled = tmp.proximity_pooled;
percarea_pooled = tmp.percarea_pooled;
uq_mcu = tmp.uq_mcu; 

%% Calculate 4i stain mean intensities for MCUs
som = csvread(path_som,1,1);
f = @(x) nanmean(x,1);
mcu_mean_int = grpstats(som,mcu_labels, f);
mcu_mean_int = asinh(mcu_mean_int);
mcu_mean_int_zs = zscore(mcu_mean_int);

%% generate the 2D positions of the MCU nodes based on spatial proximity scores from multiplexed protein maps
map_prox_coordinates = tsne(proximity_pooled,[],2,proximity_pooled,perplexity); %tSNE implementation as in the SightOf package by the Pe'er Lab. Any other implementation works, inputs might have to be changed.

%% filter SPS based on defined threshold
selector = find(triu(ones(size(proximity_pooled))));
lin_adj = proximity_pooled(selector);
foo = repmat(uq_mcu',size(proximity_pooled,1),1);
destination = foo(selector);
foo = repmat(uq_mcu',1,size(proximity_pooled,1));
source = foo(selector);

threshold = std(abs(lin_adj)) * std_display_limit_edges;
bool_keep = abs(lin_adj)>threshold;

%% prepare variables for plotting
coord_w_edges = [source(bool_keep)' destination(bool_keep)];
coord_wo_edges = [source(~bool_keep)' destination(~bool_keep)];
val_to_plot = abs(lin_adj(bool_keep)*scaling_factor_edges)+0.00001;
orig_val = lin_adj(bool_keep);

%% plot MPM and MCU loading profiles
figure()

% plot MPM edges
subplot(1,2,1)
hold on
for ix = 1:size(coord_w_edges,1)
    
    if orig_val(ix) < 0 %negative spatial proximity scores are diplayed in red
        plot([map_prox_coordinates(coord_w_edges(ix,1),1) map_prox_coordinates(coord_w_edges(ix,2),1)],[map_prox_coordinates(coord_w_edges(ix,1),2) map_prox_coordinates(coord_w_edges(ix,2),2)], 'LineWidth', val_to_plot(ix), 'Color', [1 0 0])
        
    elseif orig_val(ix) > 0  %positive spatial proximity scores are diplayed in blue
        plot([map_prox_coordinates(coord_w_edges(ix,1),1) map_prox_coordinates(coord_w_edges(ix,2),1)],[map_prox_coordinates(coord_w_edges(ix,1),2) map_prox_coordinates(coord_w_edges(ix,2),2)], 'LineWidth', val_to_plot(ix), 'Color', [0 0 1])
        
    else %spatial proximity scores equaling 0 are diplayed in purple, should never be plotted!
        plot([map_prox_coordinates(coord_w_edges(ix,1),1) map_prox_coordinates(coord_w_edges(ix,2),1)],[map_prox_coordinates(coord_w_edges(ix,1),2) map_prox_coordinates(coord_w_edges(ix,2),2)], 'LineWidth', val_to_plot(ix), 'Color', [1 0 1])
        
    end
    
end

% plot MPM nodes, and label them
uq_coord = unique([coord_w_edges(:,1); coord_w_edges(:,2)]);
scatter(map_prox_coordinates(uq_coord,1),map_prox_coordinates(uq_coord,2),percarea_pooled(uq_coord)*scaling_factor_nodes, [0.7 0.7 0.7],'filled', 'MarkerEdgeColor', [0.5 0.5 0.5], 'MarkerFaceAlpha', 0.6)
text(map_prox_coordinates(uq_coord,1),map_prox_coordinates(uq_coord,2), num2strcell(uq_coord))

uq_coord = unique([coord_wo_edges(:,1); coord_wo_edges(:,2)]);
scatter(map_prox_coordinates(uq_coord,1),map_prox_coordinates(uq_coord,2),percarea_pooled(uq_coord)*scaling_factor_nodes, [0.7 0.7 0.7],'filled', 'MarkerEdgeColor', [0.5 0.5 0.5], 'MarkerFaceAlpha', 0.6)
text(map_prox_coordinates(uq_coord,1),map_prox_coordinates(uq_coord,2), num2strcell(uq_coord))

xl = xlim;
yl = ylim;
xlim([xl(1) xl(2)])
ylim([yl(1) yl(2)])
axis square
hold off

% plot mcu loadings
subplot(1,2,2)
imagesc(mcu_mean_int_zs, [-2 2])
colormap(redbluecmap)
colorbar
axis image
set(gca, 'YTick', [1:numel(uq_mcu)], 'YTickLabel', arrayfun(@(x) sprintf('%02d',x),uq_mcu, 'UniformOutput',false), 'XTIckLabelRotation', 90);
set(gca, 'XTick', [1:numel(list_stains)], 'XTickLabel',list_stains);
ylabel('Multiplexed Cell Units')
xlabel('4i channels')
end

